<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CS2 Demo Link Generator</title>
    <!-- Using Tailwind CSS for styling -->
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        body { background: linear-gradient(to right, #1e3a8a, #3b82f6); }
        #result a, #result-instruction a { word-break: break-all; }
    </style>
</head>
<body class="font-sans antialiased text-gray-100 flex items-center justify-center min-h-screen p-4">

    <div class="bg-gray-800 bg-opacity-50 backdrop-blur-md rounded-2xl shadow-2xl p-8 max-w-lg w-full mx-4">
        
        <div class="text-center mb-8">
            <h1 class="text-3xl font-bold text-white mb-2">CS2 Demo Link Generator</h1>
            <p class="text-blue-200">A tool for users of <a href="https://cswatch.in/" target="_blank" rel="noopener noreferrer" class="underline hover:text-white">CSWatch.in</a> to get demo download links.</p>
        </div>

        <div class="mb-8 text-left bg-gray-900 bg-opacity-50 p-4 rounded-lg">
            <h2 class="font-bold text-white mb-2">How to get your Share Code:</h2>
            <ol class="list-decimal list-inside text-sm text-blue-200 space-y-1">
                <li>In CS2, go to "Watch" &rarr; "Your Matches".</li>
                <li>Select a match and click "Copy Share Link".</li>
                <li><strong>Or:</strong> Paste a `steam://` or `csstats.gg` link below!</li>
                <li><a href="/help.html" class="underline hover:text-white">Need help with CSstats.gg links? Click here.</a></li>
            </ol>
        </div>

        <form id="shareCodeForm">
            <div class="mb-4">
                <input 
                    type="text" 
                    id="shareCodeInput"
                    placeholder="Paste your Share Code or Link here..."
                    class="w-full px-4 py-3 bg-gray-700 text-white border-2 border-transparent rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition duration-300"
                    required
                >
            </div>
            <button 
                type="submit" 
                id="submitButton"
                class="w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-4 rounded-lg transition duration-300 transform hover:scale-105 flex items-center justify-center"
            >
                <svg id="spinner" class="animate-spin -ml-1 mr-3 h-5 w-5 text-white hidden" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                    <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
                <span id="buttonText">Get Download Link</span>
            </button>
        </form>

        <div id="result" class="mt-8 p-6 bg-gray-900 rounded-lg text-center min-h-[80px] flex items-center justify-center transition-all duration-300">
            <p class="text-gray-400">Your link will appear here...</p>
        </div>

        <div class="text-center mt-8 text-blue-200 text-sm space-y-2">
            <p>Created by <a href="https://steamcommunity.com/id/norton99/" target="_blank" rel="noopener noreferrer" class="font-bold underline hover:text-white">norton99</a></p>
            <p>Special thanks to <a href="https://github.com/m0onmo0n" target="_blank" rel="noopener noreferrer" class="font-bold underline hover:text-white">Moon Moon</a> for server hosting.</p>
            <div class="flex items-center justify-center space-x-4">
                <div class="flex items-center space-x-2">
                    <span>Main:</span>
                    <span id="apiStatusMain" class="h-3 w-3 rounded-full bg-yellow-500" title="Checking..."></span>
                </div>
                <div class="flex items-center space-x-2">
                    <span>Backup 1:</span>
                    <span id="apiStatusBackup1" class="h-3 w-3 rounded-full bg-yellow-500" title="Checking..."></span>
                </div>
                <div class="flex items-center space-x-2">
                    <span>Backup 2:</span>
                    <span id="apiStatusBackup2" class="h-3 w-3 rounded-full bg-yellow-500" title="Checking..."></span>
                </div>
            </div>
            <div class="pt-2">
                <span>Total links generated: <span id="parseCounter" class="font-bold">...</span></span>
            </div>
        </div>
    </div>
    
    <!-- Developer Panel -->
    <div id="devPanel" class="hidden fixed bottom-4 right-4 bg-gray-900 p-4 rounded-lg shadow-lg text-white text-xs w-80">
        <h3 class="font-bold mb-2">Developer Panel (Press ` to toggle)</h3>
        <div id="endpointSelector" class="space-y-1"></div>
    </div>

    <script>
        const form = document.getElementById('shareCodeForm');
        const input = document.getElementById('shareCodeInput');
        const resultDiv = document.getElementById('result');
        const counterSpan = document.getElementById('parseCounter');
        const apiStatusMain = document.getElementById('apiStatusMain');
        const apiStatusBackup1 = document.getElementById('apiStatusBackup1');
        const apiStatusBackup2 = document.getElementById('apiStatusBackup2');
        const devPanel = document.getElementById('devPanel');
        const endpointSelector = document.getElementById('endpointSelector');
        
        const apiEndpoints = [
            { name: 'Primary (Moon Moon)', url: 'https://csreplay.moon-moon.tech' },
            { name: 'Backup 1 (Cloudflare)', url: 'https://improve-pig-banner-prove.trycloudflare.com' },
            { name: 'Backup 2 (Moon Moon 2)', url: 'https://csreplay2.moon-moon.tech' }
        ];
        let activeApiEndpoint = localStorage.getItem('activeApiEndpoint') || apiEndpoints[0].url;
        
        function buildDevPanel() {
            endpointSelector.innerHTML = '';
            apiEndpoints.forEach(endpoint => {
                const isChecked = endpoint.url === activeApiEndpoint;
                endpointSelector.innerHTML += `
                    <div>
                        <input type="radio" id="${endpoint.name}" name="apiEndpoint" value="${endpoint.url}" ${isChecked ? 'checked' : ''}>
                        <label for="${endpoint.name}" class="ml-1">${endpoint.name}</label>
                    </div>
                `;
            });
            document.querySelectorAll('input[name="apiEndpoint"]').forEach(radio => {
                radio.addEventListener('change', (event) => {
                    activeApiEndpoint = event.target.value;
                    localStorage.setItem('activeApiEndpoint', activeApiEndpoint);
                    checkApiStatus();
                });
            });
        }

        document.addEventListener('keydown', (e) => {
            if (e.key === '`') {
                devPanel.classList.toggle('hidden');
            }
        });

        // Helper function for fetch with a manual timeout
        function fetchWithTimeout(resource, options = {}, timeout = 5000) {
            return new Promise((resolve, reject) => {
                const controller = new AbortController();
                const id = setTimeout(() => {
                    controller.abort();
                    reject(new Error('Request timed out'));
                }, timeout);
                
                fetch(resource, { ...options, signal: controller.signal })
                    .then(response => {
                        clearTimeout(id);
                        resolve(response);
                    })
                    .catch(error => {
                        clearTimeout(id);
                        reject(error);
                    });
            });
        }

        async function fetchWithFallback(path, options, timeout = 10000) {
            const orderedEndpoints = [
                apiEndpoints.find(e => e.url === activeApiEndpoint),
                ...apiEndpoints.filter(e => e.url !== activeApiEndpoint)
            ];

            for (const endpoint of orderedEndpoints) {
                if (!endpoint) continue;
                try {
                    const response = await fetchWithTimeout(`${endpoint.url}${path}`, options, timeout);
                    if (response.ok) {
                        activeApiEndpoint = endpoint.url;
                        buildDevPanel();
                        return response;
                    }
                } catch (error) {
                    console.error(`Request to ${endpoint.url}${path} failed:`, error);
                }
            }
            throw new Error('All API endpoints are unreachable.');
        }

        async function checkApiStatus() {
            const statuses = [apiStatusMain, apiStatusBackup1, apiStatusBackup2];
            apiEndpoints.forEach(async (endpoint, index) => {
                const statusSpan = statuses[index];
                if (!statusSpan) return;
                try {
                    const response = await fetchWithTimeout(`${endpoint.url}/count`);
                    statusSpan.className = `h-3 w-3 rounded-full ${response.ok ? 'bg-green-500' : 'bg-red-500'}`;
                    statusSpan.title = response.ok ? 'Online' : 'Offline';
                } catch (error) {
                    statusSpan.className = 'h-3 w-3 rounded-full bg-red-500';
                    statusSpan.title = 'Offline';
                }
            });
        }

        async function getInitialCount() {
            let totalCount = 0;
            const promises = apiEndpoints.map(endpoint => 
                fetchWithTimeout(`${endpoint.url}/count`)
                    .then(res => res.ok ? res.json() : {count: 0})
                    .catch(() => ({count: 0}))
            );

            const results = await Promise.all(promises);
            results.forEach(result => {
                if (result && typeof result.count === 'number') {
                    totalCount += result.count;
                }
            });
            
            counterSpan.textContent = totalCount > 0 ? totalCount : 'N/A';
        }

        async function handleSubmit(event) {
            event.preventDefault();
            let userInput = input.value.trim();

            if (userInput.includes('csstats.gg/match/')) {
                displayCsStatsInstructions(userInput);
                return;
            }

            const match = userInput.match(/(CSGO-[a-zA-Z0-9]{5}-[a-zA-Z0-9]{5}-[a-zA-Z0-9]{5}-[a-zA-Z0-9]{5}-[a-zA-Z0-9]{5})/);
            
            if (match && match[0]) {
                const shareCode = match[0];
                setLoading(true);
                try {
                    const response = await fetchWithFallback('/decode', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ shareCode: shareCode }),
                    });
                    const data = await response.json();
                    displayLink(data.downloadLink);
                    getInitialCount();
                } catch (error) {
                    displayError(error.message);
                } finally {
                    setLoading(false);
                }
            } else {
                displayError('Could not find a valid Share Code in the text you provided.');
            }
        }
        
        function displayCsStatsInstructions(url) {
             resultDiv.innerHTML = `
                <div id="result-instruction" class="flex flex-col items-center space-y-4 text-center">
                    <p class="font-bold text-white">CSstats.gg Link Detected!</p>
                    <p class="text-sm text-yellow-300 bg-yellow-900 bg-opacity-50 px-3 py-2 rounded-md">
                        Please follow the <a href="/help.html" class="underline hover:text-white">help guide</a> to get your Share Code, then paste it here.
                    </p>
                </div>
            `;
        }

        function displayLink(link) {
            const proxyUrl = `${activeApiEndpoint}/download?url=${encodeURIComponent(link)}`;
            const filename = link.split('/').pop();
            resultDiv.innerHTML = `
                <div class="flex flex-col items-center space-y-4 text-center">
                    <p class="font-bold text-white">Your download is ready!</p>
                    <a 
                        href="${proxyUrl}" 
                        download="${filename}"
                        class="bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded-lg transition duration-300"
                    >Download Demo</a>
                    <button id="copyButton" class="bg-gray-700 hover:bg-gray-600 text-white font-bold py-2 px-4 rounded-lg text-sm transition duration-300">
                        Copy Original Link
                    </button>
                </div>
            `;
            document.getElementById('copyButton').addEventListener('click', () => {
                const textArea = document.createElement('textarea');
                textArea.value = link;
                document.body.appendChild(textArea);
                textArea.select();
                try {
                    document.execCommand('copy');
                    const copyButton = document.getElementById('copyButton');
                    copyButton.textContent = 'Copied!';
                    setTimeout(() => { copyButton.textContent = 'Copy Original Link'; }, 2000);
                } catch (err) {
                    console.error('Failed to copy text: ', err);
                }
                document.body.removeChild(textArea);
            });
        }

        function displayError(message) {
            resultDiv.innerHTML = `<p class="text-red-400 font-semibold">${message}</p>`;
        }
        
        function setLoading(isLoading) {
            const button = document.getElementById('submitButton');
            const spinner = document.getElementById('spinner');
            const buttonText = document.getElementById('buttonText');
            button.disabled = isLoading;
            spinner.classList.toggle('hidden', !isLoading);
            buttonText.textContent = isLoading ? 'Decoding...' : 'Get Download Link';
        }

        document.addEventListener('DOMContentLoaded', () => {
            form.addEventListener('submit', handleSubmit);
            buildDevPanel();
            checkApiStatus();
            getInitialCount();
            setInterval(checkApiStatus, 30000);
        });
    </script>
</body>
</html>
