<!DOCTYPE html>
<html lang="en" class="dark"> <!-- Default to dark mode -->
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CS2 Demo Link Generator</title>
    <!-- Using Tailwind CSS for styling -->
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        /* Custom styles for dark/light mode toggle */
        body { 
            background: linear-gradient(to right, #1e3a8a, #3b82f6);
            transition: background-color 0.3s ease;
        }
        html.light body {
            background: linear-gradient(to right, #a5b4fc, #60a5fa);
        }
        .content-box {
            background: rgba(31, 41, 55, 0.5);
            backdrop-filter: blur(10px);
        }
        html.light .content-box {
             background: rgba(255, 255, 255, 0.5);
        }
        #result a, #result-instruction a { word-break: break-all; }
    </style>
</head>
<body class="font-sans antialiased text-gray-900 dark:text-gray-100 flex items-center justify-center min-h-screen p-4">

    <!-- Dark/Light Mode Toggle -->
    <button id="theme-toggle" type="button" class="text-gray-500 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700 focus:outline-none focus:ring-4 focus:ring-gray-200 dark:focus:ring-gray-700 rounded-lg text-sm p-2.5 fixed top-4 right-4">
        <svg id="theme-toggle-dark-icon" class="hidden w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z"></path></svg>
        <svg id="theme-toggle-light-icon" class="hidden w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.121-3.536a1 1 0 010 1.414l-.707.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM10 16a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM4.95 14.536a1 1 0 011.414 0l.707-.707a1 1 0 01-1.414-1.414l-.707.707a1 1 0 010 1.414zM4.464 6.05A1 1 0 006.05 4.636l-.707-.707a1 1 0 00-1.414 1.414l.707.707z" fill-rule="evenodd" clip-rule="evenodd"></path></svg>
    </button>

    <div class="content-box rounded-2xl shadow-2xl p-8 max-w-lg w-full mx-4">
        
        <div class="text-center mb-8">
            <div class="w-48 mx-auto mb-2">
                <img src="./CSReplay Logo.png" alt="CSReplay Logo">
            </div>
            <h1 class="text-3xl font-bold text-gray-900 dark:text-white mb-2">CS2 Demo Link Generator</h1>
            <p class="text-blue-800 dark:text-blue-200">A tool for users of <a href="https://cswatch.in/" target="_blank" rel="noopener noreferrer" class="underline hover:text-white">CSWatch.in</a> to get demo download links.</p>
        </div>

        <div class="mb-8 text-left bg-gray-300 dark:bg-gray-900 bg-opacity-50 dark:bg-opacity-50 p-4 rounded-lg">
            <h2 class="font-bold text-gray-900 dark:text-white mb-2">How to get your Share Code:</h2>
            <ol class="list-decimal list-inside text-sm text-blue-700 dark:text-blue-200 space-y-1">
                <li>In CS2, go to "Watch" &rarr; "Your Matches".</li>
                <li>Select a match and click "Copy Share Link".</li>
                <li><strong>Or:</strong> Paste a `steam://` or `csstats.gg` link below!</li>
                <li><a href="/help.html" class="underline hover:text-white">Need help with CSstats.gg links? Click here.</a></li>
            </ol>
        </div>

        <form id="shareCodeForm">
            <div class="mb-4">
                <input 
                    type="text" 
                    id="shareCodeInput"
                    placeholder="Paste your Share Code or Link here..."
                    class="w-full px-4 py-3 bg-gray-200 dark:bg-gray-700 text-gray-900 dark:text-white border-2 border-transparent rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                    required
                >
            </div>
            <button 
                type="submit" 
                id="submitButton"
                class="w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-4 rounded-lg transition duration-300 transform hover:scale-105 flex items-center justify-center"
            >
                <svg id="spinner" class="animate-spin -ml-1 mr-3 h-5 w-5 text-white hidden" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                    <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
                <span id="buttonText">Get Download Link</span>
            </button>
        </form>

        <div id="result" class="mt-8 p-6 bg-gray-200 dark:bg-gray-900 rounded-lg text-center min-h-[80px] flex items-center justify-center transition-all duration-300">
            <p class="text-gray-500 dark:text-gray-400">Your link will appear here...</p>
        </div>

        <div class="text-center mt-8 text-blue-800 dark:text-blue-200 text-sm space-y-2">
            <p>Created by <a href="https://steamcommunity.com/id/norton99/" target="_blank" rel="noopener noreferrer" class="font-bold underline hover:text-white">norton99</a></p>
            <p>Special thanks to <a href="https://github.com/m0onmo0n" target="_blank" rel="noopener noreferrer" class="font-bold underline hover:text-white">Moon Moon</a> for server hosting.</p>
            <div class="flex items-center justify-center space-x-4">
                <div class="flex items-center space-x-2">
                    <span>Main:</span>
                    <span id="apiStatusMain" class="h-3 w-3 rounded-full bg-yellow-500" title="Checking..."></span>
                </div>
                <div class="flex items-center space-x-2">
                    <span>Backup 1:</span>
                    <span id="apiStatusBackup1" class="h-3 w-3 rounded-full bg-yellow-500" title="Checking..."></span>
                </div>
                <div class="flex items-center space-x-2">
                    <span>Backup 2:</span>
                    <span id="apiStatusBackup2" class="h-3 w-3 rounded-full bg-yellow-500" title="Checking..."></span>
                </div>
            </div>
            <div class="pt-2">
                <span>Total links generated: <span id="parseCounter" class="font-bold">...</span></span>
            </div>
            <div class="pt-2">
                <a href="/bulk.html" class="underline hover:text-white">Have multiple codes? Try the Bulk Generator.</a>
            </div>
        </div>
    </div>
    
    <!-- Developer Panel is omitted for brevity but would be included here -->

    <script>
        const form = document.getElementById('shareCodeForm');
        const input = document.getElementById('shareCodeInput');
        const resultDiv = document.getElementById('result');
        const counterSpan = document.getElementById('parseCounter');
        const apiStatusMain = document.getElementById('apiStatusMain');
        const apiStatusBackup1 = document.getElementById('apiStatusBackup1');
        const apiStatusBackup2 = document.getElementById('apiStatusBackup2');
        
        const apiEndpoints = [
            { name: 'Primary (Moon Moon)', url: 'https://csreplay.moon-moon.tech' },
            { name: 'Backup 1 (Cloudflare)', url: 'https://ran-hunger-putting-guest.trycloudflare.com' },
            { name: 'Backup 2 (Moon Moon 2)', url: 'https://csreplay2.moon-moon.tech' }
        ];
        let activeApiEndpoint = apiEndpoints[0].url;

        // --- THEME TOGGLE LOGIC ---
        const themeToggleBtn = document.getElementById('theme-toggle');
        const themeToggleDarkIcon = document.getElementById('theme-toggle-dark-icon');
        const themeToggleLightIcon = document.getElementById('theme-toggle-light-icon');

        if (localStorage.getItem('color-theme') === 'light' || (!('color-theme' in localStorage) && window.matchMedia('(prefers-color-scheme: light)').matches)) {
            document.documentElement.classList.remove('dark');
            themeToggleLightIcon.classList.remove('hidden');
        } else {
            document.documentElement.classList.add('dark');
            themeToggleDarkIcon.classList.remove('hidden');
        }

        themeToggleBtn.addEventListener('click', function() {
            themeToggleDarkIcon.classList.toggle('hidden');
            themeToggleLightIcon.classList.toggle('hidden');
            if (localStorage.getItem('color-theme')) {
                if (localStorage.getItem('color-theme') === 'light') {
                    document.documentElement.classList.add('dark');
                    localStorage.setItem('color-theme', 'dark');
                } else {
                    document.documentElement.classList.remove('dark');
                    localStorage.setItem('color-theme', 'light');
                }
            } else {
                if (document.documentElement.classList.contains('dark')) {
                    document.documentElement.classList.remove('dark');
                    localStorage.setItem('color-theme', 'light');
                } else {
                    document.documentElement.classList.add('dark');
                    localStorage.setItem('color-theme', 'dark');
                }
            }
        });
        // --- END THEME LOGIC ---

        async function fetchWithTimeout(resource, options = {}, timeout = 5000) {
            const controller = new AbortController();
            const id = setTimeout(() => controller.abort(), timeout);
            return fetch(resource, { ...options, signal: controller.signal }).finally(() => clearTimeout(id));
        }

        async function fetchWithFallback(path, options, timeout = 10000) {
            let lastError = 'All API endpoints are unreachable.';
            for (const endpoint of apiEndpoints) {
                try {
                    const response = await fetchWithTimeout(`${endpoint.url}${path}`, options, timeout);
                    if (response.ok) {
                        activeApiEndpoint = endpoint.url;
                        return response;
                    }
                    const errorJson = await response.json().catch(() => null);
                    if (errorJson && errorJson.error) lastError = errorJson.error;
                } catch (error) {
                    if (error instanceof Error) lastError = error.message;
                }
            }
            throw new Error(lastError);
        }

        async function checkApiStatus() {
            const statuses = [apiStatusMain, apiStatusBackup1, apiStatusBackup2];
            for (let i = 0; i < apiEndpoints.length; i++) {
                try {
                    const response = await fetchWithTimeout(`${apiEndpoints[i].url}/count`);
                    statuses[i].className = `h-3 w-3 rounded-full ${response.ok ? 'bg-green-500' : 'bg-red-500'}`;
                    statuses[i].title = response.ok ? 'Online' : 'Offline';
                } catch (error) {
                    statuses[i].className = 'h-3 w-3 rounded-full bg-red-500';
                    statuses[i].title = 'Offline';
                }
                await new Promise(resolve => setTimeout(resolve, 250));
            }
        }

        async function getInitialCount() {
            try {
                // With Firebase, we only need to ask one server for the central count.
                const response = await fetchWithFallback('/count');
                const data = await response.json();
                counterSpan.textContent = data.count;
            } catch (error) {
                counterSpan.textContent = 'N/A';
            }
        }

        async function handleSubmit(event) {
            event.preventDefault();
            let userInput = input.value.trim();
            const match = userInput.match(/(CSGO-[a-zA-Z0-9]{5}-[a-zA-Z0-9]{5}-[a-zA-Z0-9]{5}-[a-zA-Z0-9]{5}-[a-zA-Z0-9]{5})/);
            
            if (match && match[0]) {
                setLoading(true);
                try {
                    const response = await fetchWithFallback('/decode', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ shareCode: match[0] }),
                    });
                    const data = await response.json();
                    displayLink(data.downloadLink);
                    // If the API returns a new count, update the display
                    if (data.newCount !== undefined) {
                        counterSpan.textContent = data.newCount;
                    }
                } catch (error) {
                    displayError(error.message);
                } finally {
                    setLoading(false);
                }
            } else {
                displayError('Could not find a valid Share Code in the text you provided.');
            }
        }

        function displayLink(link) {
            const proxyUrl = `${activeApiEndpoint}/download?url=${encodeURIComponent(link)}`;
            const filename = link.split('/').pop();
            resultDiv.innerHTML = `
                <div class="flex flex-col items-center space-y-4 text-center">
                    <p class="font-bold text-gray-900 dark:text-white">Your download is ready!</p>
                    <a 
                        href="${proxyUrl}" 
                        download="${filename}"
                        class="bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded-lg transition duration-300"
                    >Download Demo</a>
                    <button id="copyButton" class="bg-gray-700 hover:bg-gray-600 text-white font-bold py-2 px-4 rounded-lg text-sm transition duration-300">
                        Copy Original Link
                    </button>
                </div>
            `;
            document.getElementById('copyButton').addEventListener('click', () => {
                const textArea = document.createElement('textarea');
                textArea.value = link;
                document.body.appendChild(textArea);
                textArea.select();
                try {
                    document.execCommand('copy');
                    const copyButton = document.getElementById('copyButton');
                    copyButton.textContent = 'Copied!';
                    setTimeout(() => { copyButton.textContent = 'Copy Original Link'; }, 2000);
                } catch (err) {
                    console.error('Failed to copy text: ', err);
                }
                document.body.removeChild(textArea);
            });
        }

        function displayError(message) {
            resultDiv.innerHTML = `<p class="text-red-400 font-semibold">${message}</p>`;
        }
        
        function setLoading(isLoading) {
            const button = document.getElementById('submitButton');
            const spinner = document.getElementById('spinner');
            const buttonText = document.getElementById('buttonText');
            button.disabled = isLoading;
            spinner.classList.toggle('hidden', !isLoading);
            buttonText.textContent = isLoading ? 'Decoding...' : 'Get Download Link';
        }

        document.addEventListener('DOMContentLoaded', () => {
            form.addEventListener('submit', handleSubmit);
            checkApiStatus();
            getInitialCount();
            setInterval(checkApiStatus, 30000);
        });
    </script>
</body>
</html>
